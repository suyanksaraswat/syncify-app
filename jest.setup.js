/* eslint-disable global-require */

jest.mock('react-native/Libraries/Animated/src/NativeAnimatedHelper');

jest.mock('react-native-gesture-handler', () => {
  const View = require('react-native/Libraries/Components/View/View');
  return {
    Swipeable: View,
    DrawerLayout: View,
    State: {},
    ScrollView: View,
    Slider: View,
    Switch: View,
    TextInput: View,
    ToolbarAndroid: View,
    ViewPagerAndroid: View,
    DrawerLayoutAndroid: View,
    WebView: View,
    NativeViewGestureHandler: View,
    TapGestureHandler: View,
    FlingGestureHandler: View,
    ForceTouchGestureHandler: View,
    LongPressGestureHandler: View,
    PanGestureHandler: View,
    PinchGestureHandler: View,
    RotationGestureHandler: View,
    RawButton: View,
    BaseButton: View,
    RectButton: View,
    BorderlessButton: View,
    FlatList: View,
    gestureHandlerRootHOC: jest.fn(),
    Directions: {},
  };
});

jest.mock('react-native-track-player', () => ({
  addEventListener: jest.fn(),
  registerEventHandler: jest.fn(),
  registerPlaybackService: jest.fn(),
  setupPlayer: jest.fn(),
  destroy: jest.fn(),
  updateOptions: jest.fn(),
  add: jest.fn(),
  remove: jest.fn(),
  skip: jest.fn(),
  skipToNext: jest.fn(),
  skipToPrevious: jest.fn(),
  removeUpcomingTracks: jest.fn(),
  // playback commands
  reset: jest.fn(),
  play: jest.fn(),
  pause: jest.fn(),
  stop: jest.fn(),
  seekTo: jest.fn(),
  setVolume: jest.fn(),
  setRate: jest.fn(),
  // player getters
  getQueue: jest.fn(),
  getTrack: jest.fn(),
  getCurrentTrack: jest.fn(),
  getVolume: jest.fn(),
  getDuration: jest.fn(),
  getPosition: jest.fn(),
  getBufferedPosition: jest.fn(),
  getState: jest.fn(),
  getRate: jest.fn(),
  useTrackPlayerEvents: jest.fn(),
  Event: {
    PlaybackState: 'playback-state',
    PlaybackError: 'playback-error',
    PlaybackQueueEnded: 'playback-queue-ended',
    PlaybackTrackChanged: 'playback-track-changed',
    RemotePlay: 'remote-play',
    RemotePlayId: 'remote-play-id',
    RemotePlaySearch: 'remote-play-search',
    RemotePause: 'remote-pause',
    RemoteStop: 'remote-stop',
    RemoteSkip: 'remote-skip',
    RemoteNext: 'remote-next',
    RemotePrevious: 'remote-previous',
    RemoteJumpForward: 'remote-jump-forward',
    RemoteJumpBackward: 'remote-jump-backward',
    RemoteSeek: 'remote-seek',
    RemoteSetRating: 'remote-set-rating',
    RemoteDuck: 'remote-duck',
    RemoteLike: 'remote-like',
    RemoteDislike: 'remote-dislike',
    RemoteBookmark: 'remote-bookmark',
  },
}));
